Menu="FileActivity:1"
Title="Settings"
Tag="gear"
---
<?php
/* Copyright 2020-2025, Dan Landon
 *
 * Permission is granted to use this software for personal, educational, or internal use only.
 *
 * Commercial use, redistribution, or modification of this software or any derived works is strictly prohibited without prior written permission.
 */

/* Define our plugin name. */
define('FILE_ACTIVITY_PLUGIN', 'file.activity');

/* Define the docroot path. */
if (!defined('DOCROOT')) {
	define('DOCROOT', $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp');
}

/* Parse the plugin config file. */
$file_activity_cfg	= parse_plugin_cfg(FILE_ACTIVITY_PLUGIN, true);

$file_activity_log	= "/var/log/file.activity.log";
$zip				= str_replace(' ','_',strtolower($var['NAME']))."-file.activity-".date('Ymd-Hi').".zip";

$pidFile	= '/var/run/file.activity.pid';
$pidStatus	= file_exists($pidFile) ? 'Running' : 'Stopped';
$pidColor 	= $pidStatus == 'Running' ? 'green' : 'orange';
?>

<table class="tablesorter shift ups">
	<thead>
		<tr><th>_(File Activity Settings)_ 
			<span style="float:right; text-transform:none; font-size:1.3em;">Status: <span style="color:<?=$pidColor;?>;"><?=$pidStatus;?></span>
		</th></tr>
	</thead>
</table>

<?if ($var['mdState']=="STARTED"):?>
:file_activity_loggging_plug:
> File Activity Monitoring:
>
> File open, read, write, and modify activity is monitored and logged on the array using inotify and is displayed by disk or share, UD disks, and cache.
> You need to start the File Activity in order to log the disk activity.
> File Activity is intended to be running for short periods so you can check disk activity.
> A server with a lot of file activity can fill the log space.
> The 'appdata', 'docker', 'domains', 'syslogs', and 'system' directories (case insensitive) are excluded.
> **SSD devices are not monitored by default.**
>
> Note: File Activity monitoring is stopped if the array is stopped, and will restart when the array is started if it is enabled.
:end

<div>
<form markdown="1" name="file_activity" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="file.activity/file.activity.cfg">
<input type="hidden" name="#command" value="/plugins/file.activity/scripts/rc.file.activity">
<input type="hidden" name="#arg[1]" value="update">

_(Enable File Activity Monitoring)_?
: <span class="inline-block">
  <select name="SERVICE" size="1">
	<?=mk_option($file_activity_cfg['SERVICE'], "disable", "_(No)_");?>
	<?=mk_option($file_activity_cfg['SERVICE'], "enable", "_(Yes)_");?>
  </select>
</span>

:file_activity_enable_logging_plug:
> Set to **Yes** to enable File Activity monitoring when the server is started.
:end

_(Enable for SSD Devices)_?
: <span class="inline-block">
  <select name="INCLUDE_SSD" size="1">
	<?=mk_option($file_activity_cfg['INCLUDE_SSD'], "no", "_(No)_");?>
	<?=mk_option($file_activity_cfg['INCLUDE_SSD'], "yes", "_(Yes)_");?>
  </select>
</span>

:file_activity_enable_ssd_plug:
> Set to **Yes** to enable File Activity monitoring for any SSD Devices, otherwise only Spinning Devices are monitored.
>
> Monitoring SSD devices can overwhelm file activity logging from hyper activity on SSDs.
:end

_(Enable for Unassigned Devices)_?
: <span class="inline-block">
  <select name="INCLUDE_UD" size="1">
	<?=mk_option($file_activity_cfg['INCLUDE_UD'], "yes", "_(Yes)_");?>
	<?=mk_option($file_activity_cfg['INCLUDE_UD'], "no", "_(No)_");?>
  </select>
</span>

:file_activity_enable_ud_plug:
> Set to **Yes** to enable File Activity monitoring for Unassigned Devices if the Unassigned Devices plugin is installed.
:end

_(Enable for Cache and Pool Disks)_?
: <span class="inline-block">
  <select name="INCLUDE_CACHE" size="1">
	<?=mk_option($file_activity_cfg['INCLUDE_CACHE'], "no", "_(No)_");?>
	<?=mk_option($file_activity_cfg['INCLUDE_CACHE'], "yes", "_(Yes)_");?>
  </select>
</span>

:file_activity_enable_cache_plug:
> Set to **Yes** to enable File Activity monitoring for the Cache and Pool Disks.
:end

_(Display Events)_ :
: <span class="inline-block">
  <input type="text" name="DISPLAY_EVENTS" class="narrow" maxlength="4" value="<?=htmlspecialchars($file_activity_cfg['DISPLAY_EVENTS']);?>" placeholder="25">
</span>

:file_activity_display_events_plug:
> This is the number of file events shown on disks and shares from the File Activity log for each share or disk.
:end

<input type="submit" name="#default" value="_(Default)_" title="_(Load and apply default values)_"><input type="button" value="_(Download)_" title="_(Download File Activity Log)_" onclick="getlog()">
: <span class="inline-block">
	<? if (!is_file("/var/run/file.activity.pid")): ?>
	<input type="submit" name="startstop" value="_(Start)_" title="_(Start File Activity Monitoring)_">
	<? else: ?>
	<input type="submit" name="startstop" value="_(Stop)_" title="_(Stop File Activity Monitoring)_">
	<? endif; ?>
	<input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()">
</span>
</form>
</div>
<?else:?>
	<p>Array is stopped!</p>
<?endif;?>

<script>
document.addEventListener("DOMContentLoaded", function() {
	const form = document.forms['file_activity'];
	const applyBtn = form.querySelector('input[name="#apply"]');
	const startStopBtn = form.querySelector('input[name="startstop"]');
	let clickedButton = null;

	/* Track clicked submit button */
	form.querySelectorAll('input[type="submit"]').forEach(btn => {
		btn.addEventListener('click', function() {
			clickedButton = this;
		});
	});

	/* Adjust arg[1] or disable start/stop on submit */
	form.addEventListener('submit', function(e) {
		const argInput = form.querySelector('input[name="#arg[1]"]');

		if (clickedButton) {
			if (clickedButton.name === 'startstop') {
				argInput.value = clickedButton.value.toLowerCase();
			} else if (clickedButton.name === '#apply' && startStopBtn) {
				startStopBtn.disabled = true;
			}
		}
	});

	/* Watch for Apply button being enabled and disable start/stop in response */
	if (applyBtn && startStopBtn) {
		const observer = new MutationObserver(() => {
			if (!applyBtn.disabled) startStopBtn.disabled = true;
		});
		observer.observe(applyBtn, { attributes: true, attributeFilter: ['disabled'] });
	}
});

function cleanUp() {
	if (document.hasFocus()) {
		$('input[value="Downloading..."]').val('Download').prop('disabled',false);
		$.post('/webGui/include/Download.php',{cmd:'delete',file:'<?=$zip?>'});
	} else {
		setTimeout(cleanUp,4000);
	}
}  

function getlog() {
	$('input[value="Download"]').val('Downloading...').prop('disabled',true);
	$.post('/webGui/include/Download.php',{cmd:'save',source:'<?=$file_activity_log?>',file:'<?=$zip?>'},function(zip) {
		location = zip;
		setTimeout(cleanUp,4000);
	});
}

$(function() {
	if ( typeof caPluginUpdateCheck === "function" ) {
		caPluginUpdateCheck("file.activity.plg");
	}

	<?if ($display['resize']):?>
		$('pre.up').css('height',Math.max(window.innerHeight-400,450)).show();
	<?endif;?>
});


</script>

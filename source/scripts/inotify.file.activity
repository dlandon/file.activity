#!/bin/bash
# Usage:
#
# Copyright 2020-2025, Dan Landon
#
# Permission is granted to use this software for personal, educational, or internal use only.
#
# Commercial use, redistribution, or modification of this software or any derived works is strictly prohibited without prior written permission.
#
plugin="file.activity"
inotify="file.activity.inotify"
disks_file="/tmp/${plugin}/${plugin}.disks"
CONFIG="/boot/config/plugins/${plugin}/${plugin}.cfg"
source $CONFIG
PROG_NAME=${plugin}

# If file activity inotify is already running, don't run it again
if [ -e "/var/run/${plugin}.pid" ] && [ ! -e "/var/run/${inotify}.pid" ]; then
	# Create pid file to indicate inotify is running.
	echo $$ > /var/run/${inotify}.pid

	logger "File Activity inotify starting" -t"$PROG_NAME"

	# Configure the disks_file based on the file activity settings.
	/usr/local/emhttp/plugins/${plugin}/scripts/configure_file_activity ${INCLUDE_SSD} ${INCLUDE_UD} ${INCLUDE_CACHE}

	# Initialize directory count
	dir_count=0

	# Loop through each mount point in the file
	while IFS= read -r mount_point || [ -n "$mount_point" ]; do
		if [ -d "$mount_point" ]; then
			# Use find only when the directory exists
			count=$(find "$mount_point" -type d 2>/dev/null | wc -l)
			dir_count=$((dir_count + count))
		fi
	done < "$disks_file"

	# Calculate the required watches with a 10% buffer
	required_watches=$((dir_count + (dir_count / 10)))

	# Find the current inotify watches being used
	current_watches=$(find /proc/*/fd -lname anon_inode:inotify 2>/dev/null | cut -d/ -f5 | grep -v 'no such file or directory' | awk '{s+=$1} END {print s}')

	# Calculate the new limit
	new_limit=$((current_watches + required_watches))

	# Check the current maximum limit
	current_limit=$(/usr/bin/cat /proc/sys/fs/inotify/max_user_watches)

	# Update the limit if necessary
	if [ "$new_limit" -gt "$current_limit" ]; then
		logger "Updating inotify max_user_watches from '$current_limit' to '$new_limit'" -t"$PROG_NAME"

		# Set the inotify max_user_watches.
		sysctl -qw fs.inotify.max_user_watches="$new_limit" > /dev/null
	fi

	open_isdir=",ISDIR"

	# Define FIFO path
	FIFO_PATH="/tmp/${plugin}/inotify_queue"

	# Cleanup function
	cleanup() {
		logger "File Activity inotify exiting" -t"$PROG_NAME"

		kill "$inotify_pid" 2>/dev/null
		wait "$inotify_pid" 2>/dev/null

		# Remove PID file
		rm -f /var/run/${inotify}.pid

		[ -p "$FIFO_PATH" ] && rm -f "$FIFO_PATH"
		exit 0
	}

	# Set trap to clean up on exit
	trap cleanup SIGINT SIGTERM EXIT

	# Create FIFO if it doesn't exist
	[ -p "$FIFO_PATH" ] || mkfifo "$FIFO_PATH"

	# Start inotifywait and send output to FIFO
	inotifywait --monitor -rs --quiet --event open,attrib,move,create,delete,modify \
		--excludei 'appdata|docker|domains|syslogs|system' \
		--timefmt '%b %d %H:%M:%S' \
		--format '%T %e => %w%f' \
		--fromfile "${disks_file}" > "$FIFO_PATH" &

	# Get the inotifywait pid.
	inotify_pid=$!

	# Read from FIFO
	while IFS= read -r line < "$FIFO_PATH"
	do
		if [ "${line/$open_isdir}" = "$line" ]; then
			# Add line to log
			echo "$line" >> /var/log/${plugin}.log

			# Trim log file if it is over 20000 lines
			sed -i -e :a -e '$q;N;20001,$D;ba' /var/log/${plugin}.log &
		fi
	done
fi
